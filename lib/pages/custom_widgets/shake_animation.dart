import 'dart:math' as math;import 'package:flutter/material.dart';class ShakeAnimation extends StatefulWidget {  final Widget child;  final AnimationController animationController;  final VoidCallback? onAnimationCompleted;  const ShakeAnimation({    super.key,    required this.child,    required this.animationController,    this.onAnimationCompleted,  });  @override  ShakeAnimationState createState() => ShakeAnimationState();}class ShakeAnimationState extends State<ShakeAnimation>    with TickerProviderStateMixin {  late AnimationController _controller;  late Animation<double> _animation;  late Animation<double> _rotationAnimation;  @override  void initState() {    super.initState();    _controller = AnimationController(      duration: const Duration(milliseconds: 1000),      vsync: this,    );    _animation = Tween<double>(begin: -5, end: 5).animate(      CurvedAnimation(        parent: _controller,        curve: Curves.fastOutSlowIn,      ),    );    _rotationAnimation = Tween<double>(begin: 0, end: math.pi / 20).animate(      CurvedAnimation(        parent: _controller,        curve: Curves.linear,      ),    );    listenControllerStatus();  }  void listenControllerStatus() {    widget.animationController.addStatusListener((status) {      if (status == AnimationStatus.completed) {        _controller.forward();        _controller.repeat(reverse: true);      }    });  }  @override  void dispose() {    _controller.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    return AnimatedBuilder(      animation: _animation,      builder: (context, child) {        return Transform.translate(          offset: Offset(_animation.value, -_animation.value),          child: Transform.rotate(            angle: _rotationAnimation.value,            alignment: Alignment.bottomRight,            child: widget.child,          ),        );      },    );  }}